library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
swirl()
.64
.36
.64
mypdf
integrate(mypdf)
integrate(mypdf(lower = 0, upper = 1.6 ))
integrate(mypdf(0,1.6 ))
skip()
.5
2
skip()
skip()
skip()
skip()
swirl()
skip()
expect_dice()
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
.5 *( E(X_hi)+E(X_lo) )
.5 *( edh + edl)
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam,1,mean)
mean(smeans)
knitr::opts_chunk$set(echo = TRUE)
StormData_csv <- read_csv("~/Desktop/Coursera/ReproducibleResearch/Project2/StormData.csv.bz2")
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", "StormData.csv.bz2", method = "curl")
library("bitops", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("readr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
StormData_csv <- read_csv("~/Desktop/Coursera/ReproducibleResearch/Project2/StormData.csv.bz2")
StormData_csv$Casualties <- StormData_csv$INJURIES + StormData_csv$FATALITIES
StormCasualties <- count(StormData_csv, EVTYPE, wt=Casualties, sort = TRUE)
bp <- ggplot(head(StormHarmful, 10), aes(x=EVTYPE, y=n)) + geom_bar(stat = "identity")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
StormCasualties <- count(StormData_csv, EVTYPE, wt=Casualties, sort = TRUE)
library(ggplot2)
library(plyr)
library(readr)
library(ggplot2)
library(dplyr)
library(readr)
StormData_csv$Casualties <- StormData_csv$INJURIES + StormData_csv$FATALITIES
StormCasualties <- count(StormData_csv, EVTYPE, wt=Casualties, sort = TRUE)
StormHarmful <- subset(StormCasualties, n > 0)
bp <- ggplot(head(StormHarmful, 10), aes(x=EVTYPE, y=n)) + geom_bar(stat = "identity")
bp + scale_y_continuous(trans = "log", breaks = c(10,100,1000,10000,100000)) + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + xlab("Event Type") + ylab("log Number Fatalities + Injuries")
head(as.data.frame(StormHarmful), 30)
StormData_csv$EVTYPE <- gsub('^FOG$', 'DENSE FOG', StormData_csv$EVTYPE)
StormData_csv$EVTYPE <- gsub('^HIGH WINDS$', 'HIGH WIND', StormData_csv$EVTYPE)
StormData_csv$EVTYPE <- gsub('^TSTM WIND$', 'THUNDERSTORM WIND', StormData_csv$EVTYPE)
StormData_csv$Casualties <- StormData_csv$INJURIES + StormData_csv$FATALITIES
StormCasualties2 <- count(StormData_csv, EVTYPE, wt=Casualties, sort = TRUE)
StormHarmful2 <- subset(StormCasualties2, n > 0)
head(as.data.frame(StormHarmful2), 30)
StormData_csv[StormData_csv$CROPDMGEXP == "B" ]
StormData_csv[StormData_csv$CROPDMGEXP == "B", ]
StormData_csv[,StormData_csv$CROPDMGEXP == "B"]
StormData_csv$CROPDMG[StormData_csv$CROPDMGEXP == "B"]
table(StormData_csv$CROPDMG[StormData_csv$CROPDMGEXP == "B"]0
table(StormData_csv$CROPDMG[StormData_csv$CROPDMGEXP == "B"])
table(StormData_csv$CROPDMG[StormData_csv$CROPDMGEXP == "K"])
table(StormData_csv$CROPDMG[StormData_csv$CROPDMGEXP == "M"])
table(StormData_csv$CROPDMGEXP)
table(StormData_csv$pROPDMGEXP)
table(StormData_csv$PROPDMGEXP)
StormData_csv$CROPDMGEXP<- toupper(StormData_csv$CROPDMGEXP)
table(StormData_csv$CROPDMGEXP)
levels(StormData_csv$CROPDMGEXP)
levels(factor(StormData_csv$CROPDMGEXP))
z <- gl(3, 2, 12)
levels(z) <- c("A", "B", "A")
z
z <- gl(3, 2, 12)
z
gl(5,1,20)
StormData_csv$CROPDMGEXP<- factor(StormData_csv$CROPDMGEXP)
levels(StormData_csv$CROPDMGEXP)
levels(StormData_csv$CROPDMGEXP) <- c("0","0","0","1000000000","1000","1000000")
levels(StormData_csv$CROPDMGEXP)
str(StormData_csv$CROPDMGEXP)
PropDMGEXP <- StormData_csv$PROPDMGEXP
head(PropDMGEXP)
head(PropDMGEXP,3)
StormData_csv$PROPDMGEXP<- factor(StormData_csv$PROPDMGEXP)
levels(StormData_csv$PROPDMGEXP)
StormData_csv$PROPDMGEXP <-  PropDMGEXP
StormData_csv$PROPDMGEXP<- toupper(StormData_csv$PROPDMGEXP)
StormData_csv$PROPDMGEXP<- factor(StormData_csv$PROPDMGEXP)
levels(StormData_csv$PROPDMGEXP)
levels(StormData_csv$PROPDMGEXP) <- c(rep("0",12),"1000000000","0","1000","1000000")
str(StormData_csv$PROPDMGEXP)
with(StormData_csv, table(PropDMGEXP,PropDMGEXP))
table(PropDMGEXP,StormData_csv$PROPDMGEXP)
head(StormData_csv$PROPDMGEXP)
head(StormData_csv$PROPDMGEXP)*5
head(as.integer(StormData_csv$PROPDMGEXP))
?factor
head(as.character(StormData_csv$PROPDMGEXP))
head(as.numeric(as.character(StormData_csv$PROPDMGEXP)))
StormData_csv$propdmgmag <- StormData_csv$PROPDMG * as.numeric(as.character(StormData_csv$PROPDMGEXP))
head(StormData_csv$propdmgmag,30)
table(StormData_csv$propdmgmag)
StormData_csv[1:20, c("PROPDMGEXP", "propdmgmag")]
StormData_csv[1:20, c("PROPDMGEXP", "propdmgmag", "PROPDMG")]
StormData_csv[sample(nrow(StormData_csv),20), c("PROPDMGEXP", "propdmgmag", "PROPDMG")]
StormData_csv$propdmgmag[is.na(StormData_csv$propdmgmag)] <- 0
?qt
qt(.975, 15)
qt(.975, 100)
qt(.95, 15)
qt(.95, 15)
swirl
library(swirl)
ls()
swirl()
myplot(2)
myplot(20)
myplot2(2)
qt(.975,2)
myplot2(20)
sleep
range(g1)
range(g2)
difference <- g1-g2
difference <- g2-g1
mean(difference)
s <- sd(difference)
1.58*c(-1,1)*qt(.975,9)*s/sqrt(10)
mn + c(-1,1)*qt(.975,9)*s/sqrt(10)
t.test(difference$conf.int)
t.test(difference,x$conf.int)
t.test(difference)
t.test(difference)$conf.int
sp <- (8-1)(15.34)^2+(21-1)(18.23)^2
sp <- (8-1)*(15.34)^2+(21-1)*(18.23)^2
ns <- 7+20
sp <- sqrt(ns/sp)
sp <- sqrt(sp/ns)
(127.44-132)*c(-1,1)*qt(.95,ns)*sp*sqrt(1/8 + 1/21)
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
sp <- sqrt((9*var(g1)*9*var(g2))/18)
sp <- sqrt((9*var(g1)+9*var(g2))/18)
md+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
md+c(-1,1)*qt(.975,18)*sp*sqrt(1/5)
t.test(g2,g1,paired = FALSE, var.equal = TRUE)$conf
t.test(g2,g1,paired = TRUE)$conf
sqrt(((15.34)^2/8)+((18.23)^2/21))
num <- (15.34^2/8 + 18.23^2/21)^2
den <- (15.34^4/8^2/7) + (18.23^4/21^2/20)
num/den
mydf <- num/den
132.86-127.44 + qt(.975,mydf)*SE
132.86-127.44 + qt(.975,mydf)* 15.34^2/8 + 18.23^2/21
132.86-127.44 +c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
10/sqrt(100)
2
2/(10/sqrt(15))
(32-30)/(10/4)
15
qt(.95,15)
dim(fs)
t.test(fs$fheight-fs$sheight)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
.144
7
mybin[7]
8
swirl()
pt(2.5,15)
pt(2.5,15, lower.tail = FALSE)
qnorm(95)
qnorm(.95)
qnorm(.99)
pnorm(2)
pnorm(2, lower.tail = FALSE)
mybin
pbinom(6, size=8, prob=.5, and lower.tail=FALSE)
pbinom(6, size=8, prob=.5, lower.tail=FALSE)
pbinom(7, size=8, prob=.5, lower.tail=TRUE)
ppois(9,5,lower.tail = FALSE)
setwd("~/Desktop/Coursera/Statistical Inference")
?replicate
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
?runif
?boxplot
boxplot(len ~ dose, data = ToothGrowth,
boxwex = 0.25, at = 1:3 - 0.2,
subset = supp == "VC", col = "yellow",
main = "Guinea Pigs' Tooth Growth",
xlab = "Vitamin C dose mg",
ylab = "tooth length",
xlim = c(0.5, 3.5), ylim = c(0, 35), yaxs = "i")
qnorm(.95)
rexp(1,0.2)
rexp(1,0.2)
rexp(1,0.2)
hist(rexp(40,0.2))
hist(rexp(40,0.2))
hist(rexp(40,0.2))
hist(rexp(40,0.2))
rexp(40,0.2)
mean(rexp(40,0.2))
mean(rexp(40,0.2))
mean(rexp(40,0.2))
mean(rexp(40,0.2))
mean(rexp(40,0.2))
rexp(40,0.2)
rexp(1,0.2)
mean(rexp(1,0.2))
mean(rexp(1,0.2))
mean(rexp(1,0.2))
mean(rexp(1,0.2))
mean(rexp(1000,0.2))
mean(rexp(10000,0.2))
mean(rexp(100000,0.2))
mean(rexp(1000000,0.2))
CLT <- replicate(1000, mean(rexp(40,0.2)))
mean(CLT)
sd(CLT)
CLT80 <- replicate(1000, mean(rexp(80,0.2)))
mean(CLT80)
sd(CLT80)
sd(rexp(40,0.2))
mean(rexp(40,0.2)
mean(rexp(40,0.2)
mean(rexp(40,0.2))
sd(rexp(40,0.2))
mean(rexp(40,0.2) + c(-2,2) *sd(rexp(40,0.2))
mean(rexp(40,0.2) + c(-2,2) * sd(rexp(40,0.2))
mean(rexp(40,0.2)) + c(-2,2) * sd(rexp(40,0.2))
mean(rexp(40,0.2)) + c(-2,2) * sd(rexp(40,0.2))/sqrt(40)
mean(rexp(40,0.2)) + c(-2,2) * sd(rexp(40,0.2))/sqrt(40)
mean(rexp(40,0.2)) + c(-2,2) * sd(rexp(40,0.2))/sqrt(40)
mean(rexp(40,0.2)) + c(-2,2) * sd(rexp(40,0.2))/sqrt(40)
mean(rexp(40,0.2)) + c(-2,2) * sd(rexp(40,0.2))/sqrt(40)
swirl()
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z <- qnorm(.95)
pnorm(30+z, mean=30, and lower.tail=FALSE)
pnorm(30+z, mean=30, lower.tail=FALSE)
pnorm(30+z, mean=32, lower.tail=FALSE)
pnorm(30+z, mean=32, sd=1, lower.tail=FALSE)
pnorm(30+z, mean=32, sd=2, lower.tail=FALSE)
pnorm(30+z*2, mean=32, sd=2, lower.tail=FALSE)
0
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, sd=1, n=26, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, sd=1, n=27, type = "one.sample", alt = "one.sided")$delta
hist(rexp(40,0.2))
mean(rexp(40,0.2))
rexp(1,0.2)
mean(CLT)
sd(CLT)
mean(CLT80)
sd(CLT80)
sd(rexp(40,0.2))
mean(rexp(40,0.2)) + c(-2,2) * sd(rexp(40,0.2))/sqrt(40)
mean(rexp(40,0.2)) + c(-2,2) * sd(rexp(40,0.2))/sqrt(40)
mean(rexp(40,0.2)) + c(-2,2) * sd(rexp(40,0.2))/sqrt(40)
mean(rexp(40,0.2)) + c(-2,2) * sd(rexp(40,0.2))/sqrt(40)
mean(rexp(40,0.2)) + c(-2,2) * sd(rexp(40,0.2))/sqrt(40)
hist(mean(rexp(40,0.2)))
?matrix
hist(replicate(1000, rexp(40,0.2)))
hist(rexp(40,0.2))
λ <- 0.2
sampleSize <- 40
simulations <- 1000
simMatrix <- matrix(rexp(simulations * sampleSize, rate = λ), simulations,
sampleSize)
rowMeans(simMatrix)
dim(simMatrix)
?matrix
head(rexp(simulations * sampleSize,10)
head(rexp(simulations * sampleSize)
head(rexp(simulations * sampleSize))
setwd("~/Desktop/Coursera/Statistical Inference")
setwd("~/Desktop/Coursera/Statistical Inference/CourseraStatInfClassProjectAUG2017")
setwd("~/Desktop/Coursera/Statistical Inference/CourseraStatInfClassProjectAUG2017")
hist(rexp(40,0.2))
hist(rexp(40,0.2))
hist(rexp(40,0.2))
hist(mean(rexp(40,0.2)))
mean(rexp(40,0.2))
mean(rexp(40,0.2))
hist(rexp(40,0.2))
hist(mns)
dim(mns)
head(mns)
hist(replicate(1000, mean(rexp(40,0.2))))
hist(replicate(1000, mean(rexp(40,0.2))))
mean(replicate(1000, rexp(40,0.2)))
mu0 <- 1/λ
sampleSize <- 40
SimDist <- rexp(40,0.2)
hist(SimDist, xlab = "40 Random Exponentials", ylab = "Frequency",n = "Distribution of 40 Random Exponentials")
SimDist <- rexp(sampleSize,0.2)
hist(SimDist, xlab = "40 Random Exponentials", ylab = "Frequency",main = "Distribution of 40 Random Exponentials", col = "lightgreen")
Sample.Mean<- mean(rexp(40,0.2))
cat("Sample Mean: ", Sample.Mean)
Sample.Mean<- mean(rexp(sampleSize,0.2))
cat("Sample Mean: ", Sample.Mean)
Sample.Mean<- mean(rexp(sampleSize,0.2))
cat("Sample Mean: ", Sample.Mean)
hist(replicate(1000, Sample.Mean))
hist(replicate(1000, mean(rexp(40,0.2))))
Simulation <- replicate(1000, mean(rexp(40,0.2)))
hist(Simulation, xlab = "Distribution of mean of 40 exponentials run 1000 times", ylab = "Frequency", main = "Distribution of the mean of 40 exponentials run 1000 times", col = "lightgrey"  )
Sample.Variance <- var(Sample.Mean)
cat("Sample Variance: ", Sample.Variance)
Sample.Variance <- var(Sample.Mean)
cat("Sample Variance: ", SimDist)
Sample.Variance <- var(SimDist)
cat("Sample Variance: ", Sample.Variance)
Theoretical.Variance <- (1/λ)^2/sampleSize
cat("theoretical variance: ", Theoretical.Variance)
Sample.Variance <- var(SimDist)
cat("Sample Variance: ", Sample.Variance)
Sample.Mean<- mean(SimDist)
cat("Sample Mean: ", Sample.Mean)
var(replicate(1000, rexp(40,0.2)))
mean(replicate(1000, rexp(40,0.2)))
mean(replicate(1000, rexp(40,0.2)))
Theoretical.Variance <- (1/λ)^2/(sampleSize - 1)
cat("theoretical variance: ", Theoretical.Variance)
Theoretical.Variance <- (1/λ)^2/sampleSize
cat("Theoretical Variance: ", Theoretical.Variance)
Theoretical.Mean <- 1/λ
cat("Theoretical Mean: ", Theoretical.Mean)
t.test(Theoretical.Mean-Sample.Mean)
t.test(Simulation-SimDist)
t.test(SimDist-Simulation)
t.test(SimDist-Simulation, paired = TRUE)
t.test(SimDist, Simulation, paired = TRUE)
data("ToothGrowth")
str(ToothGrowth)
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
str(ToothGrowth)
qplot(dose, len, data = ToothGrowth, facets = supp ~ ., color = dose, xlab = "Tooth Length (mm)",
ylab = "Dose (mg/day)", main = "Exploratory plot of dose vs tooth length\n for subjects given OJ vs VitaminC")
qplot(dose, len, data = ToothGrowth, facets = supp ~ ., color = dose, xlab = "Dose (mg/day)", ylab = "Tooth Length (mm)", main = "Exploratory plot of dose vs tooth length\n for subjects given OJ vs VitaminC")
?boxplot
boxplot(len ~ dose, data = ToothGrowth,
boxwex = 0.25, at = 1:3 - 0.2,
subset = supp == "VC", col = "yellow",
main = "Guinea Pigs' Tooth Growth",
xlab = "Vitamin C dose mg",
ylab = "tooth length",
xlim = c(0.5, 3.5), ylim = c(0, 35), yaxs = "i")
example("boxplot")
boxplot(len ~ dose, data = ToothGrowth, add = TRUE,
boxwex = 0.25, at = 1:3 + 0.2,
subset = supp == "OJ", col = "lightpink")
legend(2, 9, c("Vit C", "Orange juice"),
fill = c("lightyellow", "brightorange"))
boxplot(len ~ dose, data = ToothGrowth, add = TRUE,
boxwex = 0.25, at = 1:3 + 0.2,
subset = supp == "OJ", col = "lightpink")
boxplot(len ~ dose, data = ToothGrowth, add = TRUE,
boxwex = 0.25, at = 1:3 + 0.2,
subset = supp == "OJ", col = "orange")
boxplot(len ~ dose, data = ToothGrowth, add = TRUE,
boxwex = 0.25, at = 1:3 + 0.2,
subset = supp == "OJ", col = "orange")
summary(ToothGrowth)
f <- ggplot(ToothGrowth, aes(dose,len))
f + geom_boxplot()
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
str(ToothGrowth)
View(ToothGrowth)
